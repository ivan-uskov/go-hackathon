{
	"info": {
		"_postman_id": "743f1f44-aa51-453c-8869-042963045536",
		"name": "go-hackaton",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Add Session",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const uuidSchema = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;",
							"",
							"",
							"pm.test(\"Check that it returns session id\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.hasOwnProperty('id')).to.be.true;",
							"    pm.expect(uuidSchema.test(jsonData.id)).to.be.true;",
							"",
							"    pm.globals.set(\"lastCreatedSessionId\", jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let random = +new Date();",
							"",
							"pm.globals.set(\"lastCreatedSessionCode\", `ispring-${random}`);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"code\": \"{{lastCreatedSessionCode}}\",\n    \"name\": \"iSpring code hackaton\",\n    \"type\": \"expressions\"\n}"
				},
				"url": {
					"raw": "http://{{url}}/api/v1/session",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"session"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Participant",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let random = +new Date();",
							"",
							"pm.globals.set(\"randomName\", `Ivan-${random}`);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check add first participant\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"session_code\": \"{{lastCreatedSessionCode}}\",\n    \"name\": \"{{randomName}}\",\n    \"endpoint\": \"http://127.0.0.1\"\n}"
				},
				"url": {
					"raw": "http://{{url}}/api/v1/session/{{lastCreatedSessionId}}/participant",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"session",
						"{{lastCreatedSessionId}}",
						"participant"
					]
				}
			},
			"response": []
		},
		{
			"name": "One Participant",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const uuidSchema = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;",
							"",
							"",
							"pm.test(\"Check that particpants returned\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"    for (const particpant of jsonData) {",
							"        pm.expect(particpant).to.be.an(\"object\");",
							"        pm.expect(particpant.hasOwnProperty('id')).to.be.true;",
							"        pm.expect(particpant.hasOwnProperty('name')).to.be.true;",
							"        pm.expect(particpant.hasOwnProperty('score')).to.be.true;",
							"        pm.expect(particpant.hasOwnProperty('created_at')).to.be.true;",
							"        pm.expect(particpant.hasOwnProperty('scored_at')).to.be.true;",
							"",
							"        pm.expect(uuidSchema.test(particpant.id)).to.be.true;",
							"        pm.expect(particpant.name).to.be.an(\"string\");",
							"        pm.expect(particpant.score).to.be.an(\"number\");",
							"        pm.expect(particpant.score >= 0).to.be.true;",
							"        pm.expect(particpant.created_at).to.be.an(\"string\");",
							"    }",
							"",
							"    pm.expect(jsonData.length).to.be.equals(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/api/v1/session/{{lastCreatedSessionId}}/participants",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"session",
						"{{lastCreatedSessionId}}",
						"participants"
					]
				}
			},
			"response": []
		},
		{
			"name": "Session with one participant",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const uuidSchema = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;",
							"",
							"",
							"pm.test(\"Check that sessions returned\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"    for (const session of jsonData) {",
							"        pm.expect(session).to.be.an(\"object\");",
							"        pm.expect(session.hasOwnProperty('id')).to.be.true;",
							"        pm.expect(session.hasOwnProperty('name')).to.be.true;",
							"        pm.expect(session.hasOwnProperty('participants')).to.be.true;",
							"        pm.expect(session.hasOwnProperty('type')).to.be.true;",
							"        pm.expect(session.hasOwnProperty('created_at')).to.be.true;",
							"",
							"        pm.expect(uuidSchema.test(session.id)).to.be.true;",
							"        pm.expect(session.name).to.be.an(\"string\");",
							"        pm.expect(session.participants).to.be.an(\"number\");",
							"        pm.expect(session.type).to.be.equals(\"arithmetic expression\");",
							"        pm.expect(session.created_at).to.be.an(\"string\");",
							"",
							"        if (session.id === pm.globals.get(\"lastCreatedSessionId\")) {",
							"            pm.expect(session.participants).to.be.equals(1);",
							"        }",
							"    }",
							"",
							"    pm.expect(jsonData.length).to.be.greaterThan(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/api/v1/sessions",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"sessions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Second Participant",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let random = +new Date();",
							"",
							"pm.globals.set(\"randomName\", `Ivan-${random}`);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check add first participant\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"session_code\": \"{{lastCreatedSessionCode}}\",\n    \"name\": \"{{randomName}}\",\n    \"endpoint\": \"http://127.0.0.1\"\n}"
				},
				"url": {
					"raw": "http://{{url}}/api/v1/session/{{lastCreatedSessionId}}/participant",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"session",
						"{{lastCreatedSessionId}}",
						"participant"
					]
				}
			},
			"response": []
		},
		{
			"name": "Two Participants",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const uuidSchema = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;",
							"",
							"",
							"pm.test(\"Check that particpants returned\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"    for (const particpant of jsonData) {",
							"        pm.expect(particpant).to.be.an(\"object\");",
							"        pm.expect(particpant.hasOwnProperty('id')).to.be.true;",
							"        pm.expect(particpant.hasOwnProperty('name')).to.be.true;",
							"        pm.expect(particpant.hasOwnProperty('score')).to.be.true;",
							"        pm.expect(particpant.hasOwnProperty('created_at')).to.be.true;",
							"        pm.expect(particpant.hasOwnProperty('scored_at')).to.be.true;",
							"",
							"        pm.expect(uuidSchema.test(particpant.id)).to.be.true;",
							"        pm.expect(particpant.name).to.be.an(\"string\");",
							"        pm.expect(particpant.score).to.be.an(\"number\");",
							"        pm.expect(particpant.score >= 0).to.be.true;",
							"        pm.expect(particpant.created_at).to.be.an(\"string\");",
							"    }",
							"",
							"    pm.expect(jsonData.length).to.be.equals(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/api/v1/session/{{lastCreatedSessionId}}/participants",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"session",
						"{{lastCreatedSessionId}}",
						"participants"
					]
				}
			},
			"response": []
		},
		{
			"name": "Session with two participants",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const uuidSchema = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;",
							"",
							"",
							"pm.test(\"Check that sessions returned\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"    for (const session of jsonData) {",
							"        pm.expect(session).to.be.an(\"object\");",
							"        pm.expect(session.hasOwnProperty('id')).to.be.true;",
							"        pm.expect(session.hasOwnProperty('name')).to.be.true;",
							"        pm.expect(session.hasOwnProperty('participants')).to.be.true;",
							"        pm.expect(session.hasOwnProperty('type')).to.be.true;",
							"        pm.expect(session.hasOwnProperty('created_at')).to.be.true;",
							"",
							"        pm.expect(uuidSchema.test(session.id)).to.be.true;",
							"        pm.expect(session.name).to.be.an(\"string\");",
							"        pm.expect(session.participants).to.be.an(\"number\");",
							"        pm.expect(session.type).to.be.equals(\"arithmetic expression\");",
							"        pm.expect(session.created_at).to.be.an(\"string\");",
							"",
							"        if (session.id === pm.globals.get(\"lastCreatedSessionId\")) {",
							"            pm.expect(session.participants).to.be.equals(2);",
							"        }",
							"    }",
							"",
							"    pm.expect(jsonData.length).to.be.greaterThan(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/api/v1/sessions",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"sessions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Session",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const uuidSchema = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;",
							"",
							"",
							"pm.test(\"Check that it returns session id\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.hasOwnProperty('id')).to.be.true;",
							"    pm.expect(uuidSchema.test(jsonData.id)).to.be.true;",
							"",
							"    pm.globals.set(\"lastCreatedSessionId\", jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let random = +new Date();",
							"",
							"pm.globals.set(\"lastCreatedSessionCode\", `ispring-${random}`);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"code\": \"{{lastCreatedSessionCode}}\",\n    \"name\": \"iSpring code hackaton\",\n    \"type\": \"expressions\"\n}"
				},
				"url": {
					"raw": "http://{{url}}/api/v1/session",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"session"
					]
				}
			},
			"response": []
		},
		{
			"name": "Zero Participants",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that particpants returned\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"    pm.expect(jsonData.length).to.be.equals(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/api/v1/session/{{lastCreatedSessionId}}/participants",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"session",
						"{{lastCreatedSessionId}}",
						"participants"
					]
				}
			},
			"response": []
		},
		{
			"name": "Session with zero participants",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const uuidSchema = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;",
							"",
							"",
							"pm.test(\"Check that sessions returned\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"array\");",
							"    for (const session of jsonData) {",
							"        pm.expect(session).to.be.an(\"object\");",
							"        pm.expect(session.hasOwnProperty('id')).to.be.true;",
							"        pm.expect(session.hasOwnProperty('name')).to.be.true;",
							"        pm.expect(session.hasOwnProperty('participants')).to.be.true;",
							"        pm.expect(session.hasOwnProperty('type')).to.be.true;",
							"        pm.expect(session.hasOwnProperty('created_at')).to.be.true;",
							"",
							"        pm.expect(uuidSchema.test(session.id)).to.be.true;",
							"        pm.expect(session.name).to.be.an(\"string\");",
							"        pm.expect(session.participants).to.be.an(\"number\");",
							"        pm.expect(session.type).to.be.equals(\"arithmetic expression\");",
							"        pm.expect(session.created_at).to.be.an(\"string\");",
							"",
							"        if (session.id === pm.globals.get(\"lastCreatedSessionId\")) {",
							"            pm.expect(session.participants).to.be.equals(0);",
							"        }",
							"    }",
							"",
							"    pm.expect(jsonData.length).to.be.greaterThan(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/api/v1/sessions",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"v1",
						"sessions"
					]
				}
			},
			"response": []
		}
	]
}